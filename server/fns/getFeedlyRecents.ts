import { FEEDLY_TOKEN } from 'utils/secrets'

type Params = {
  url: string
  xmlURL: string
  limit?: number
}

export const getFeedlyRecents = async (params: Params) => {
  const { url, xmlURL, limit = 30 } = params

  const json = await fetch(
    `https://api.feedly.com/v3/feeds/feed%2F${encodeURIComponent(
      xmlURL,
    )}?${new URLSearchParams({
      numRecentEntries: String(limit),
      ck: String(Date.now()),
      ct: 'feedly.desktop',
      cv: '31.0.2062',
    })}`,
    {
      headers: {
        authorization: `Bearer ${FEEDLY_TOKEN}`,
        'content-type': 'application/json',
      },
    },
  ).then<R>((r) => r.json())

  const { recentEntries, title } = json

  return {
    title,
    items: recentEntries.map(({ title, alternate, originId }) => ({
      title,
      link: alternate?.[0].href ?? originId,
    })),
  }
}

// Generated by https://quicktype.io

export interface R {
  language: string
  description: string
  id: string
  title: string
  feedId: string
  website: string
  subscribers: number
  velocity: number
  updated: number
  recentEntries: RecentEntry[]
}

export interface RecentEntry {
  fingerprint: string
  id: string
  originId: string
  origin: Origin
  content: Content
  title: string
  crawled: number
  published: number
  updated: number
  alternate: Alternate[]
}

export interface Alternate {
  type: Type
  href: string
}

export enum Type {
  TextHTML = 'text/html',
}

export interface Content {
  content: string
  direction: Direction
}

export enum Direction {
  LTR = 'ltr',
}

export interface Origin {
  streamId: string
  title: string
  htmlUrl: string
}
