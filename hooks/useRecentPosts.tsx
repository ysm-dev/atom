'use client'

import { useQuery } from '@tanstack/react-query'
import ms from 'ms'
import { decodeHTMLEntities } from 'utils/decodeHtml'
import { isURL } from 'utils/isURL'

export function useRecentPosts(xmlURL?: string) {
  const { data, ...rest } = useQuery({
    queryKey: ['recents', xmlURL],
    queryFn: async () => {
      const data = await fetch(
        `https://api.feedly.com/v3/feeds/feed%2F${encodeURIComponent(
          xmlURL!,
        )}?${new URLSearchParams({ numRecentEntries: '3' })}`,
        {
          headers: {
            authorization:
              'Bearer A5DxYTCfYNSaAZOleZqEG87C7pvHEcXq2OQTHe1ArvsgGgIWKfQz0mQFUbru73dOnTFq-VPsQu2CiyTx2qW8VWuXZKoRoJS6OyDPCM-uog_KVnLY81yvCskqb6LCawTGkV65rZuXQlmkB_4f3JCOijINSHnaZU94wzoaVXfDRPXSDCBwlC_rQpNfSmXla92X3XJlKvAOS_vDYWfitmY0LkzBfO58KET9IogzhDnYv9eTw_U:feedly',
            'content-type': 'application/json',
          },
        },
      ).then<R>((r) => r.json())

      return data.recentEntries.map((e) => ({
        link: e.canonicalUrl ?? e.alternate?.[0]?.href ?? e.originId,
        title: decodeHTMLEntities(e.title),
      }))
    },
    enabled: !!xmlURL && isURL(xmlURL),
    staleTime: ms('1h'),
  })

  return { data, ...rest }
}

// Generated by https://quicktype.io

export interface R {
  language: string
  description: string
  id: string
  title: string
  feedId: string
  website: string
  subscribers: number
  velocity: number
  updated: number
  recentEntries: RecentEntry[]
}

export interface RecentEntry {
  id: string
  fingerprint: string
  originId: string
  canonicalUrl: string
  origin: Origin
  title: string
  crawled: number
  published: number
  alternate: Alternate[]
  summary: Summary
}

export interface Alternate {
  type: string
  href: string
}

export interface Origin {
  streamId: string
  title: string
  htmlUrl: string
}

export interface Summary {
  content: string
  direction: string
}
