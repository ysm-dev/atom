'use client'

import { useQuery } from '@tanstack/react-query'
import { parseString } from 'lib/parseString'
import ms from 'ms'
import { decodeHTMLEntities } from 'utils/decodeHtml'
import { getServerURL } from 'utils/getServerURL'
import { isURL } from 'utils/isURL'

type Params = {
  url?: string
  xmlURL?: string
}

export function useRecentPosts(params: Params) {
  const { url, xmlURL } = params

  const { data, ...rest } = useQuery({
    queryKey: ['recents', xmlURL],
    queryFn: () => getRecentPosts(params),
    enabled: !!url && !!xmlURL && isURL(xmlURL),
    staleTime: ms('1h'),
  })

  return { data, ...rest }
}

export const getRecentPosts = async (params: Params) => {
  const { url, xmlURL } = params

  const xml = await fetch(
    `${getServerURL()}/proxy?${new URLSearchParams({
      url: xmlURL!,
    })}`,
  ).then((r) => r.text())

  const rss = await parseString({ xml, xmlURL })

  if (!rss) {
    return null
  }

  const { title, items } = rss

  return items.map(({ link, title }) => ({
    title: title ? decodeHTMLEntities(title) : 'Untitled',
    link: isURL(link) ? link : `${new URL(url!).origin}${link}`,
  }))
}

// export const getRecentPosts = async (xmlURL: string) => {
//   const data = await fetch(
//     `https://api.feedly.com/v3/feeds/feed%2F${encodeURIComponent(
//       xmlURL!,
//     )}?${new URLSearchParams({ numRecentEntries: '100' })}`,
//     {
//       headers: {
//         authorization: `Bearer ${FEEDLY_TOKEN}`,
//         'content-type': 'application/json',
//       },
//     },
//   ).then<R>((r) => r.json())

//   return data.recentEntries
//     .sort((a, b) => b.published - a.published)
//     .map((e) => ({
//       link: e.canonicalUrl ?? e.alternate?.[0]?.href ?? e.originId,
//       title: decodeHTMLEntities(e.title),
//     }))
// }

// Generated by https://quicktype.io

export interface R {
  language: string
  description: string
  id: string
  title: string
  feedId: string
  website: string
  subscribers: number
  velocity: number
  updated: number
  recentEntries: RecentEntry[]
}

export interface RecentEntry {
  id: string
  fingerprint: string
  originId: string
  canonicalUrl: string
  origin: Origin
  title: string
  crawled: number
  published: number
  alternate: Alternate[]
  summary: Summary
}

export interface Alternate {
  type: string
  href: string
}

export interface Origin {
  streamId: string
  title: string
  htmlUrl: string
}

export interface Summary {
  content: string
  direction: string
}
