'use client'

import { useQuery } from '@tanstack/react-query'
import ms from 'ms'
import { decodeHTMLEntities } from 'utils/decodeHtml'
import { getFaviconURI } from 'utils/getFaviconURI'
import { isURL } from 'utils/isURL'
import { FEEDLY_TOKEN } from 'utils/secrets'

type Params = {
  url?: string
  enabled?: boolean
}

export function useFeed({ url, enabled }: Params) {
  const { data, ...rest } = useQuery({
    queryKey: ['feed', url],
    queryFn: () => getFeed(url!),
    enabled: isURL(url) && enabled,
    staleTime: ms('1h'),
  })

  return { data, ...rest }
}

export const getFeed = async (url: string) => {
  const data = await fetch(
    `https://api.feedly.com/v3/search/feeds?${new URLSearchParams({
      q: url!,
      n: '8',
      withWebsite: 'true',
      autocomplete: 'true',
      fullTerm: 'false',
      locale: 'en',
      ct: 'feedly.desktop',
      cv: `31.0.2046`,
      ck: `${Date.now()}`,
    })}`,
    {
      headers: {
        authorization: `Bearer ${FEEDLY_TOKEN}`,
        'content-type': 'application/json',
      },
    },
  ).then<R>((r) => r.json())

  const result = data.results?.[0]

  if (!result) {
    return {
      url,
    }
  }

  return {
    url,
    xmlURL: result.feedId.replace('feed/', ''),
    htmlURL: result.website ?? url,
    title: result.title
      ? decodeHTMLEntities(result.title)
      : new URL(url).hostname,
    description: result.description,
    favicon: await getFaviconURI(url!),
  }
}

// Generated by https://quicktype.io

export interface R {
  success: boolean
  results: Result[]
}

export interface Result {
  scheme: string
  lastUpdated: number
  score: number
  coverUrl: string
  description: string
  language: string
  id: string
  title: string
  feedId: string
  website: string
  topics: string[]
  subscribers: number
  velocity: number
  updated: number
  iconUrl: string
  visualUrl: string
  partial: boolean
}
